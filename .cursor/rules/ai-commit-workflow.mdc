---
description:
globs:
alwaysApply: true
---
### 1. Staging and File Selection
- The AI MUST check the git status before every commit.
- The AI MUST stage only files relevant to the current commit message.
- If unrelated files are staged, the AI MUST unstage all, then stage only the correct files.

### 2. Commit Message Generation
- The AI MUST generate the commit message (title + optional body) in a temporary file.
- The commit message MUST follow the conventional commit format and all commitlint rules.

### 3. Commit Message Validation
- The AI MUST validate the commit message with commitlint **before** attempting the commit:
  ```bash
  npx commitlint --edit temp_commit_msg.txt
  ```
- If the message is invalid, the commit MUST be aborted and the message corrected.

### 4. Commit Creation
- The AI MUST use the script:
  ```bash
  [ai-commit-with-template.sh](mdc:scripts/ai-workflow/ai-commit-with-template.sh) temp_commit_msg.txt
  ```
- This script will:
  - Validate the message with commitlint
  - Create the commit with the provided message file

### 5. Temporary File Cleanup
- After each commit, the AI MUST delete the temporary commit message file:
  ```bash
  rm -f temp_commit_msg.txt
  ```

### 6. Example Workflow
```bash
# 1. Stage only relevant files
git add path/to/changed/file.ts

# 2. Generate commit message
echo 'fix(scope): correct bug in feature X' > temp_commit_msg.txt
echo '' >> temp_commit_msg.txt
echo 'This fixes a bug that caused...' >> temp_commit_msg.txt

# 3. Validate message
npx commitlint --edit temp_commit_msg.txt

# 4. Commit using the script
[ai-commit-with-template.sh](mdc:scripts/ai-workflow/ai-commit-with-template.sh) temp_commit_msg.txt

# 5. Clean up
rm -f temp_commit_msg.txt
```
